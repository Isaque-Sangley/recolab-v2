name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests with pytest
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit.xml \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Check code formatting (Black)
      run: |
        black --check --diff src/ tests/
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --statistics
    
    - name: Check import sorting (isort)
      run: |
        isort --check-only --diff src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: üîí Run security checks (Bandit)
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: üì§ Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    
    steps:
    - name: All checks passed
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' }}
      run: echo "‚úÖ All checks passed successfully!"
    
    - name: Some checks failed
      if: ${{ needs.test.result != 'success' || needs.lint.result != 'success' }}
      run: |
        echo "‚ùå Some checks failed!"
        exit 1